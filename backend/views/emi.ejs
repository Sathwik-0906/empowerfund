<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>EMI Calculator - EmpowerFund</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
  <link rel="stylesheet" href="/css/emi.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>

  <aside class="sidebar-final">
    <div class="sidebar-header">
      <h2 class="sidebar-title">EmpowerFund</h2>
    </div>
    <nav class="sidebar-nav">
      <a href="/dashboard"><i class="fas fa-home"></i> Overview</a>
      <a href="/investments"><i class="fas fa-chart-line"></i> Investments</a>
      <a href="/stocks"><i class="fas fa-chart-bar"></i> Stock Market</a>
      <a href="/sip"><i class="fas fa-calculator"></i> SIP Calculator</a>
      <a href="/emi" class="active"><i class="fas fa-file-invoice-dollar"></i> EMI Calculator</a>
      <a href="#"><i class="fas fa-book-open"></i> Resources</a>
    </nav>
    <div class="sidebar-user-profile">
        <div class="user-info">
            <span class="user-name"><%= user.name %></span>
            <span class="user-email"><%= user.email %></span>
        </div>
      <a href="/api/users/logout" class="logout-link"><i class="fas fa-sign-out-alt"></i></a>
    </div>
  </aside>

  <main class="main-content">
    <h1 class="page-title">EMI Calculator</h1>

    <div class="calculator-container">
      <div class="form-card">
        <h3>Loan Details</h3>
        <form id="emiForm">
          <div class="form-group">
            <div class="input-group">
              <label for="principalInput">Loan Amount (₹):</label>
              <input type="number" id="principalInput" min="100000" max="10000000" step="10000" value="1000000">
            </div>
            <input type="range" id="principalSlider" min="100000" max="10000000" step="10000" value="1000000">
          </div>
          <div class="form-group">
            <div class="input-group">
              <label for="rateInput">Interest Rate (%):</label>
              <input type="number" id="rateInput" min="0" max="20" step="0.1" value="8.5">
            </div>
            <input type="range" id="rateSlider" min="0" max="20" step="0.1" value="8.5">
          </div>
          <div class="form-group">
            <div class="input-group">
              <label for="tenureInput">Loan Tenure (Months):</label>
              <input type="number" id="tenureInput" min="6" max="360" step="6" value="240">
            </div>
            <input type="range" id="tenureSlider" min="6" max="360" step="6" value="240">
          </div>
        </form>
      </div>

      <div class="results-card">
        <div class="results-final">
          <h3>Monthly EMI</h3>
          <p class="emi-value" id="emiValue"></p>
          <div class="results-breakdown">
            <div class="breakdown-item">
              <span>Principal Amount</span>
              <strong id="principalAmount"></strong>
            </div>
            <div class="breakdown-item">
              <span>Total Interest</span>
              <strong id="totalInterest"></strong>
            </div>
          </div>
          <div class="chart-container">
            <canvas id="resultsChart"></canvas>
          </div>
        </div>
      </div>
    </div>
  </main>
  
  <script>
    // --- Get all input elements ---
    const principalSlider = document.getElementById('principalSlider');
    const principalInput = document.getElementById('principalInput');
    const rateSlider = document.getElementById('rateSlider');
    const rateInput = document.getElementById('rateInput');
    const tenureSlider = document.getElementById('tenureSlider');
    const tenureInput = document.getElementById('tenureInput');

    // --- Get all display elements ---
    const emiValueEl = document.getElementById('emiValue');
    const principalAmountEl = document.getElementById('principalAmount');
    const totalInterestEl = document.getElementById('totalInterest');

    let resultsChart;
    const chartCtx = document.getElementById('resultsChart').getContext('2d');

    const toCurrency = (value) => `₹${value.toLocaleString('en-IN', {minimumFractionDigits: 0, maximumFractionDigits: 0})}`;

    function calculateAndDisplay() {
        const principal = parseFloat(principalInput.value);
        const annualInterestRate = parseFloat(rateInput.value);
        const tenureInMonths = parseFloat(tenureInput.value);

        if (isNaN(principal) || isNaN(annualInterestRate) || isNaN(tenureInMonths) || tenureInMonths <= 0) return;

        // Sync slider with input
        principalSlider.value = principal;
        rateSlider.value = annualInterestRate;
        tenureSlider.value = tenureInMonths;
        
        let emi;
        const monthlyRate = annualInterestRate / 12 / 100;

        // *** THIS IS THE BUG FIX ***
        if (monthlyRate === 0) {
            emi = principal / tenureInMonths;
        } else {
            emi = (principal * monthlyRate * Math.pow(1 + monthlyRate, tenureInMonths)) / (Math.pow(1 + monthlyRate, tenureInMonths) - 1);
        }
        
        const totalPayment = emi * tenureInMonths;
        const totalInterest = totalPayment - principal;

        emiValueEl.textContent = toCurrency(emi);
        principalAmountEl.textContent = toCurrency(principal);
        totalInterestEl.textContent = toCurrency(totalInterest);

        updateChart(principal, totalInterest);
    }

    function updateChart(principal, interest) {
        const data = {
            labels: ['Principal Amount', 'Total Interest'],
            datasets: [{
                data: [principal, interest > 0 ? interest : 0], // ensure interest is not negative
                backgroundColor: ['#007991', '#0b486b'],
                borderColor: '#fff',
                borderWidth: 2
            }]
        };

        if(resultsChart) {
            resultsChart.data = data;
            resultsChart.update();
        } else {
            resultsChart = new Chart(chartCtx, {
                type: 'pie',
                data: data,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                             labels: { font: { family: "'Poppins', sans-serif" } }
                        }
                    }
                }
            });
        }
    }

    // --- Event Listeners to sync inputs and sliders ---
    principalSlider.addEventListener('input', (e) => {
        principalInput.value = e.target.value;
        calculateAndDisplay();
    });
    principalInput.addEventListener('input', (e) => {
        principalSlider.value = e.target.value;
        calculateAndDisplay();
    });

    rateSlider.addEventListener('input', (e) => {
        rateInput.value = e.target.value;
        calculateAndDisplay();
    });
    rateInput.addEventListener('input', (e) => {
        rateSlider.value = e.target.value;
        calculateAndDisplay();
    });

    tenureSlider.addEventListener('input', (e) => {
        tenureInput.value = e.target.value;
        calculateAndDisplay();
    });
    tenureInput.addEventListener('input', (e) => {
        tenureSlider.value = e.target.value;
        calculateAndDisplay();
    });

    document.addEventListener('DOMContentLoaded', calculateAndDisplay);
  </script>

</body>
</html>