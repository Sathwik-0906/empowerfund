<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Login - EmpowerFund</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
  <link rel="stylesheet" href="/css/main.css">
</head>
<body>
  <header>
    <h1>Stock Market Data</h1>
    <p>Fetch real-time stock market data.</p>
  </header>

  <nav>
    <a href="/dashboard">Home</a>
    <a href="/sip">SIP Calculator</a>
    <a href="/emi">EMI Calculator</a>
    <a href="/investments">Investment Options</a>
    <a href="/stocks">Stock Market Data</a>
    <a href="/api/users/logout">Logout</a>
  </nav>

  <!-- Display flash messages (if any) -->
  <% if (messages.error) { %>
    <div class="alert alert-error">
      <%= messages.error %>
    </div>
  <% } %>

  <div class="section">
    <form id="stockForm">
      <label for="symbol">Stock Symbol:</label>
      <input type="text" id="symbol" name="symbol" placeholder="e.g., AAPL" required>
      <button type="submit">Fetch Data</button>
      <p class="loading">Fetching data...</p>
      <p class="error"></p>
    </form>
    <div id="stockData"></div>
  </div>

  <footer>
    <p>&copy; 2025 EmpowerFund. All rights reserved.</p>
  </footer>

  <script>
    document.getElementById('stockForm').addEventListener('submit', async (e) => {
      e.preventDefault();

      const symbol = document.getElementById('symbol').value.trim().toUpperCase();
      const errorElement = document.querySelector('.error');
      const loadingElement = document.querySelector('.loading');
      const resultElement = document.getElementById('stockData');

      if (!symbol) {
        errorElement.textContent = "Please enter a stock symbol.";
        errorElement.style.display = "block";
        return;
      }

      errorElement.style.display = "none";
      loadingElement.style.display = "block";
      resultElement.innerHTML = "";

      try {
        // Simulate API call with a delay
        setTimeout(() => {
          const mockData = {
            'Meta Data': {
              '2. Symbol': symbol,
              '3. Last Refreshed': '2023-10-05',
            },
            'Time Series (Daily)': {
              '2023-10-05': {
                '1. open': '170.50',
                '2. high': '172.00',
                '3. low': '169.80',
                '4. close': '171.20',
                '5. volume': '1200000',
              },
              '2023-10-04': {
                '1. open': '169.00',
                '2. high': '170.50',
                '3. low': '168.50',
                '4. close': '170.00',
                '5. volume': '1100000',
              },
              '2023-10-03': {
                '1. open': '168.00',
                '2. high': '169.50',
                '3. low': '167.50',
                '4. close': '168.80',
                '5. volume': '1000000',
              },
            },
          };

          loadingElement.style.display = "none";

          if (!mockData || !mockData['Meta Data'] || !mockData['Time Series (Daily)']) {
            errorElement.textContent = "No data available for this symbol.";
            errorElement.style.display = "block";
            return;
          }

          resultElement.innerHTML = formatStockData(mockData);
        }, 1000); // Simulate 1 second delay for API call
      } catch (error) {
        loadingElement.style.display = "none";
        errorElement.textContent = "Server error. Please try again later.";
        errorElement.style.display = "block";
      }
    });

    function formatStockData(data) {
      const metaData = data['Meta Data'];
      const timeSeries = data['Time Series (Daily)'];
      let html = `<h3>${metaData['2. Symbol']} - ${metaData['3. Last Refreshed']}</h3>`;

      html += `<table>
          <thead>
              <tr>
                  <th>Date</th>
                  <th>Open</th>
                  <th>High</th>
                  <th>Low</th>
                  <th>Close</th>
                  <th>Volume</th>
              </tr>
          </thead>
          <tbody>`;

      let count = 0;
      for (const date in timeSeries) {
        if (count >= 3) break; // Limit to last 3 days
        const dailyData = timeSeries[date];
        html += `<tr>
            <td>${date}</td>
            <td>${dailyData['1. open']}</td>
            <td>${dailyData['2. high']}</td>
            <td>${dailyData['3. low']}</td>
            <td>${dailyData['4. close']}</td>
            <td>${dailyData['5. volume']}</td>
        </tr>`;
        count++;
      }

      html += `</tbody></table>`;
      return html;
    }
  </script>
</body>
</html>